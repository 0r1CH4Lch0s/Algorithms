#counts the number of comparisons quickSort makes.
#this version of quickSort takes the median of the first element, the
# median element and the last element of the list L to be the pivot.
CountCompars = 0
import urllib

def quickSort(L):
    '''quickSort sorts an unordered list L, length n,
    of elements into sequential (numerical) order.'''
    print L
    global CountCompars
    n = len(L)
    CountCompars += n-1
    #choose a pivot. For Q1, choose pivot to be the left-most entry in the list.
    if n == 1:
        return L
    counter = 0
    #carry out quickSort subroutine
    pivot = sorted([L[0], L[(n-1)/2], L[n-1]])[1]
    pivot_Index = L.index(pivot)
    #start by swapping pivot with 1st element in array.
    L[pivot_Index], L[0] = L[0], L[pivot_Index]
    for i in range(1,n):
        if L[i] < pivot:
            counter += 1
            L[i], L[counter] = L[counter], L[i] 
    #Now swap pivot with right-most entry less than pivot, and
    #partition subroutine is complete!
    L[0], L[counter] = L[counter], L[0]
    # L[counter] == pivot should be true
    
    if n == 2:
        return L
    
    '''apply quickSort to the array left of the pivot and 
    apply quickSort to the array to the right of the pivot'''
    if counter == 0:
        return [pivot]+quickSort(L[1:])
    elif counter+1 == n:
        return quickSort(L[:counter])+[pivot]
    elif 0 <= counter <= n-1:
        return quickSort(L[:counter])+[pivot]+quickSort(L[(counter+1):])
    #then apply the base case when you reach the leaves of the tree
    #then just return the current array.
longList = []
for line in urllib.urlopen("https://d3c33hcgiwev3.cloudfront.net/_32387ba40b36359a38625cbb397eee65_QuickSort.txt?Expires=1490054400&Signature=lelzgjYDtF6iXUtIqFIgmKwpk9WljFrH-F78MDFoPqf5UAotl72u23X5OISscXG5AmrjnPLt0om1yXMZMkBWl9D3TCdkJQgMw~ZRsr6ilZc0dLALhV0BuNaaDcss1DQRcQdbuq1MdXH7erFLx~c4hFOFrlunO9r-jloqIkBgA9A_&Key-Pair-Id=APKAJLTNE6QMUY6HBC5A"):
    longList.append(int(line))
    
#testList = [1,3,2,7,5,4,6,12,15,16,21,18,34,99,22,17,9,8]
#print quickSort(testList)
print quickSort(longList)
print CountCompars